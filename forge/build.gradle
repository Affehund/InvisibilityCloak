buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "org.spongepowered.mixin"
apply plugin: 'maven-publish'

archivesBaseName = "${mod_id}-forge-${minecraft_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'runClientForge'

            property "mixin.env.disableRefMap", "true"

            arg "-mixin.config=${mod_id}.mixins.json"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'runServerForge'

            property "mixin.env.disableRefMap", "true"

            arg "-mixin.config=${mod_id}.mixins.json"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'runDataForge'

            property "mixin.env.disableRefMap", "true"

            arg "-mixin.config=${mod_id}.mixins.json"
            args '--mod', mod_id, '--all', '--output', file('../shared/src/generated/resources/'), '--existing', file('../shared/src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        ext.refMap = "${mod_id}.refmap.json"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly project(":shared")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")
}

tasks.withType(JavaCompile) {
    source(project(":shared").sourceSets.main.allSource)
}


processResources {
    from project(":shared").sourceSets.main.resources

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand project.properties.clone()
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    duplicatesStrategy("include")
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
